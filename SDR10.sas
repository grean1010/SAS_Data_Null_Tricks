**********************************************************************
*                                                                     
* PROGRAM:  SDR10.SAS (Generated by LOGIC_CHECKS.SAS)              
* TASK:     SESTAT - NSF, Contractor Specifications (6072-211)        
* PURPOSE:  Check for consistency/logical skip patterns               
*           for 2006 SESTAT contractor specifications.                
*                                                                     
* WRITTEN:  Automatically generated by logic_checks.sas               
*                                                                     
* INPUTS:   1) FBSDR1001.SD2 - Base file to be validated                 
*           2) FTSDR1001.SD2 - Text file to be validated                 
*           3) SDR10_lchecks_v11SAS7BDAT -                       
*                 Logic check conditions SAS Dataset                  
*           4) SDR10_expected_v11SAS7BDAT -                      
*                 List of SAS names expected by MPR                   
*                                                                     
* OUTPUT:   1) Consistency/logical skip validation summary listing    
*                                                                     
* INCLUDES: 1) SDR10.INC  - Code to check for logical skip patterns
*           2) SDR10.INC2 - table statements for proc freq         
*           2) SDR10.INC3 - set statements data step               
*           2) SDR10.INC4 - array statement                        
*                                                                     
**********************************************************************;
options nofmterr nocenter ls=132 ps=79 compress=yes source2            
        formchar='|----|+|---+=|-/\<>*';                               

libname datain '.';

/* change dataset names here if necessary */                            
%let dsnb = FBSDR1001 ;                                               
%let dsnt = FTSDR1001 ;                                               

/* macro to count up number of obs in a dataset                          
   and output to macro variable                                        */
%macro numobs(dsn,nbrobs);                                            
  %global &nbrobs;                                                    
  %let datasetid=%sysfunc(open(&dsn));                                
  %let &nbrobs=%sysfunc(attrn(&datasetid,nlobs));                     
  %let closing_code=%sysfunc(close(&datasetid));                      
%mend;                                                                

/* Merge the base and text files by refid so we can run the logical     
   skip tests.                                                        */

proc sort data=datain.&dsnb out=&dsnb;  by refid;  run;                  
proc sort data=datain.&dsnt out=&dsnt;  by refid;  run;                  

data totest;                                                             
  merge &dsnb &dsnt;                                                     
  by refid;                                                              
run;                                                                     

/* Run proc contents on the input dataset to get a list of sas_names    
   in the input dataset.  We will compare these to the sas_names in     
   the sestat database.                                               */
proc contents data=totest noprint
              out=sasnames(keep=name rename=(name=sas_name));
run;

proc sort data=sasnames; 
  by sas_name; 
run;

proc sort data=datain.SDR10_expected_v11 
           out=SDR10_expected;
  by sas_name; 
run;

data merged;
  merge sasnames(in=in1) SDR10_expected(in=in2);
  by sas_name;
  length flag $50.;
  if in1 and in2 then flag = 'Matched';
  else if in1 = 1 and in2 = 0 then flag = 'In Contractor Dataset but not MPR Specs';
  else if in1 = 0 and in2 = 1 then flag = 'NOT in Contractor Dataset but in MPR Specs';
run;

title 'SDR10.sas - Frequency of merge-check flag for variable names';
proc freq data=merged;
  tables flag / missing list;
run;
title;

proc sort data=merged (where=(flag ne 'Matched')) out=mergeprobs;
  by flag;
run;

title 'SDR10.sas - Print of variable names that did not match';
proc print data=mergeprobs noobs; 
  by flag;                    
  var sas_name;               
run;                          
title;

data basedata;
  set totest;
  %include 'SDR10.inc';
run;

proc freq data=basedata;
  %include 'SDR10.inc2';
run;

* Put all check frequencies together.  Delete records that are not a problem (i.e. problem flag = 0);
* create dataset ALLPROBS with all logic check problems (i.e. problem flag = 1) ;
data allprobs noprobs;
  %include 'SDR10.inc3';

  length prob $15.;
  %include 'SDR10.inc4';

  do i = 1 to dim(probs);
    prob = vname(probs(i));
    if probs(i) = 1 then output allprobs;
    if probs(i) = 0 and percent = 100 then output noprobs;
  end;

  keep prob count percent;
run;

* sort and merge on the dataset of problem names for use in the output;
proc sort data=allprobs;  by prob;  run; 
proc sort data=noprobs;   by prob;  run; 
proc sort data=datain.SDR10_lchecks_v11 
            out=SDR10_lchecks_v11; 
  by prob; 
run; 

data allprobs;
  merge allprobs (in=a) SDR10_lchecks_v11 ;
  by prob;
  if a; 
run;

data noprobs;
  merge noprobs (in=a) datain.SDR10_lchecks_v11 ;
  by prob;
  if a; 
run;

options nocenter;

* add a start line to the printout so we know where the problem printouts start;
data _null_;
  file print;
  put 'Begin printing problems here.';
run;

Title 'This printout gives the number of observations that FAILED each test';
data _null_;
  set allprobs (where=(count ne 0));
  file print;

  put '******************************************************************************************************************************************';
  put 'TEST Name:  ' prob;
  put 'TEST Descriptions:  ' check_description;
  put 'Number of Observations Failing:  ' count;
  put 'Percentage of Observations Failing:  ' percent;
  put '******************************************************************************************************************************************';
  put //;

run;
title;

* add one last line to the printout so we know the program ran;
data _null_;
  file print;
  put 'Done printing problems.';
run;

* Count up the number of obs in the allprobs and the noprobs datasets;
* We will use these to create a summary of results.                  ;
%numobs(allprobs,allprobs);
%numobs(noprobs,noprobs);
%numobs(mergeprobs,mergeprobs);

* print a summary of results;
data _null_;
  file print;

  allprobs = &allprobs ;
  noprobs = &noprobs ;
  mergeprobs = &mergeprobs ;

  put '-------------------';
  put 'Summary of results:';
  put '-------------------';
  put 'Number variable names that did not match what was expected:' @65 mergeprobs;
  put 'Number of tests where all observations passed:'              @65 noprobs;
  put 'Number of tests where at least one observation failed:'      @65 allprobs;
run;

